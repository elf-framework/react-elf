{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { KeyValue, StringKeyValue } from \"@react-elf-types/shared\";\nexport const NumberStyleKeys = {\n  width: true,\n  height: true,\n  top: true,\n  left: true,\n  right: true,\n  bottom: true,\n  maxWidth: true,\n  maxHeight: true,\n  minWidth: true,\n  minHeight: true,\n  margin: true,\n  marginTop: true,\n  marginRight: true,\n  marginBottom: true,\n  marginLeft: true,\n  padding: true,\n  paddingTop: true,\n  paddingRight: true,\n  paddingBottom: true,\n  paddingLeft: true,\n  border: true,\n  borderTop: true,\n  borderRight: true,\n  borderBottom: true,\n  borderLeft: true,\n  borderWidth: true,\n  borderTopWidth: true,\n  borderRightWidth: true,\n  borderBottomWidth: true,\n  borderLeftWidth: true,\n  gap: true,\n};\n\n/**\n * convertNumberStyleValue(\"width\", 10) => \"10px\"\n */\nexport function convertNumberStyleValue(key: string, value: unknown) {\n  if (typeof value === \"number\") {\n    if (NumberStyleKeys[key]) {\n      value = value + \"px\";\n    }\n  }\n\n  return value;\n}\n\nexport function propertyMap(\n  styles: KeyValue = {},\n  mapper = {}\n): KeyValue | undefined {\n  const styleObj = {};\n  Object.keys(styles).forEach((key) => {\n    if (typeof styles[key] !== \"undefined\") {\n      styleObj[mapper[key] || key] = convertNumberStyleValue(key, styles[key]);\n    }\n  });\n  return Object.keys(styleObj).length ? styleObj : undefined;\n}\n\n// cache style keys\nconst styleKeys = {};\nconst uppercasePattern = /([A-Z])/g;\n\n/**\n * convert style key to css key (camelCase to kebab-case)\n *\n * backgroundColor -> background-color\n *\n */\nexport function convertStyleKey(key: string): string {\n  // check cache\n  if (styleKeys[key]) {\n    return styleKeys[key];\n  }\n\n  const upperKey = key.replace(uppercasePattern, \"-$1\").toLowerCase();\n\n  styleKeys[key] = upperKey;\n\n  return upperKey;\n}\n\n/**\n * prefixed style key\n *\n * makeCssVariablePrefixMap(\"--elf--ui\", { backgroundColor: true });\n * =>\n * {\n *  backgroundColor: \"--elf--ui-background-color\",\n * }\n *\n */\nexport function makeCssVariablePrefixMap(\n  prefix: string,\n  obj: KeyValue = {}\n): StringKeyValue {\n  const newObj = {};\n\n  Object.keys(obj).forEach((key) => {\n    newObj[key] = prefix + \"-\" + convertStyleKey(key);\n  });\n\n  return newObj;\n}\n"],
  "mappings": ";AACO,IAAM,kBAAkB;AAAA,EAC7B,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,KAAK;AAAA,EACL,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AAAA,EACV,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,aAAa;AAAA,EACb,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,eAAe;AAAA,EACf,aAAa;AAAA,EACb,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,aAAa;AAAA,EACb,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,kBAAkB;AAAA,EAClB,mBAAmB;AAAA,EACnB,iBAAiB;AAAA,EACjB,KAAK;AACP;AAKO,SAAS,wBAAwB,KAAa,OAAgB;AACnE,MAAI,OAAO,UAAU,UAAU;AAC7B,QAAI,gBAAgB,MAAM;AACxB,cAAQ,QAAQ;AAAA,IAClB;AAAA,EACF;AAEA,SAAO;AACT;AAEO,SAAS,YACd,SAAmB,CAAC,GACpB,SAAS,CAAC,GACY;AACtB,QAAM,WAAW,CAAC;AAClB,SAAO,KAAK,MAAM,EAAE,QAAQ,CAAC,QAAQ;AACnC,QAAI,OAAO,OAAO,SAAS,aAAa;AACtC,eAAS,OAAO,QAAQ,OAAO,wBAAwB,KAAK,OAAO,IAAI;AAAA,IACzE;AAAA,EACF,CAAC;AACD,SAAO,OAAO,KAAK,QAAQ,EAAE,SAAS,WAAW;AACnD;AAGA,IAAM,YAAY,CAAC;AACnB,IAAM,mBAAmB;AAQlB,SAAS,gBAAgB,KAAqB;AAEnD,MAAI,UAAU,MAAM;AAClB,WAAO,UAAU;AAAA,EACnB;AAEA,QAAM,WAAW,IAAI,QAAQ,kBAAkB,KAAK,EAAE,YAAY;AAElE,YAAU,OAAO;AAEjB,SAAO;AACT;AAYO,SAAS,yBACd,QACA,MAAgB,CAAC,GACD;AAChB,QAAM,SAAS,CAAC;AAEhB,SAAO,KAAK,GAAG,EAAE,QAAQ,CAAC,QAAQ;AAChC,WAAO,OAAO,SAAS,MAAM,gBAAgB,GAAG;AAAA,EAClD,CAAC;AAED,SAAO;AACT;",
  "names": []
}
